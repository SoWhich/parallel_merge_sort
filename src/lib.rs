//! # Parallel Merge Sort
//!
//! `parallel_merge_sort` is an implementation of Merge Sort for a mutable
//! slice that sorts blocks of equal size in parallel threads.

extern crate num_cpus;
extern crate rand;
extern crate scoped_threadpool;

use scoped_threadpool::Pool;
use std::vec::Vec;

/// # Merge Sort
/// The mergesort function contains the actual implementation of the parallel
/// merge sort.
///
/// This merge sort generates a thread pool using the `num_cpus` crate.
///
/// The threads are scope locked so that each thread must complete before the
/// block size is doubled again.
///
/// This particular function demands a mutable slice, which is used as both
/// an input and output parameter. If you would like the function to generate
/// a new (sorted) vector, please use the function `gen_and_sort<T>(&[T])
/// -> Vec<T>`.
pub fn merge_sort<T>(arr: &mut [T])
where
    T: Ord + Send,
{
    let mut block_size = 2;

    let largest_block_size = 2 * arr.len();
    let mut pool = Pool::new(num_cpus::get() as u32);

    while block_size < largest_block_size {
        // the scope of the pooled threads is locked within this lambda, so
        // the program blocks until their completion at its end.
        pool.scoped(|scope| {
            // as many as num_blocks threads are generated by generating them
            // within this loop
            for mut block in arr.chunks_mut(block_size) {
                if block.len() <= block_size / 2 {
                    return;
                } else {
                    // and merge the halves of the slice (in parallel!)
                    scope.execute(move || {
                        //                      merge_halves(block, block_size);
                        merge_halves(block, block_size);
                    });
                }
            }
        });

        block_size *= 2;
    }
}

/// # Generate and Sort
/// This function generates a new (now sorted) vector when given an immutable
/// slice reference.
///
/// Because this function is merely light function overhead for the prior
/// `merge_sort<T>(arr: &mut Vec<T>)`, the use of that function should be
/// encouraged over this.
pub fn gen_and_sort<T>(arr: &[T]) -> Vec<T>
where
    T: Ord + Send + Clone,
{
    let mut ret = Vec::from(arr);
    merge_sort(&mut ret);
    ret
}

fn merge_halves<T>(half_sorted: &mut [T], block_size: usize)
where
    T: Ord,
{
    // because the element to be written to resides where the first block starts, there's only one
    // pointer needed to refer to both
    let mut first = half_sorted.as_mut_ptr();
    let mut second: *mut T = &mut half_sorted[(block_size / 2)];

    let mut first_block_size = block_size / 2;

    unsafe {
        // end points to the first instance of invalid memory beyond the end of the slice and is
        // NEVER dereferenced
        let end: *mut T = (&mut half_sorted[half_sorted.len() - 1] as *mut T).add(1);

        // if one block is finished, the remainder of the slice is just the other block, so the
        // function can return
        while first != second && second != end {
            // if the first element of the first block is the smaller one, it can just move forwards
            if *first < *second {
                first = first.add(1);
                first_block_size -= 1;

            // otherwise, things get a little more complicated. The first element of the second
            // block needs to be copied to a temporary, while all of the first block is shifted
            // over one unit. the temporary is then copied back, and first and second are
            // incremented
            } else {
                let tmp = second.read();
                first.copy_to(first.add(1), first_block_size);
                first.write(tmp);
                first = first.add(1);
                second = second.add(1);
            }
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use rand;
    use rand::prelude::*;
    use std::fmt::Debug;
    use std::vec::Vec;

    #[test]
    fn in_order() {
        vec_test(vec![1, 2]);
        vec_test(vec![1, 2, 3, 4, 5]);
        vec_test(vec![1, 2, 3, 4, 5, 6, 7, 8]);
        vec_test(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);
        vec_test(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);
    }

    #[test]
    fn reverse_order() {
        vec_test(vec![2, 1]);
        vec_test(vec![5, 4, 3, 2, 1]);
        vec_test(vec![8, 7, 6, 5, 4, 3, 2, 1]);
        vec_test(vec![12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]);
        vec_test(vec![15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]);
    }

    #[test]
    fn fuzz() {
        fuzzer::<char>();
        fuzzer::<i64>();
        fuzzer::<u64>();
    }

    #[test]
    fn edge() {
        vec_test(vec![1]);
        vec_test(Vec::<u32>::new());
    }

    fn fuzzer<T>()
    where
        T: Ord + Send + Clone + Debug,
        rand::distributions::Standard: rand::distributions::Distribution<T>,
    {
        let fuzz_cap = 100;
        let mut vector = Vec::<T>::with_capacity(fuzz_cap);
        for _ in 0..fuzz_cap {
            vector.push(random());
        }

        vec_test(vector);
    }

    fn vec_test<T>(mut subject: Vec<T>)
    where
        T: Ord + Send + Clone + Debug,
    {
        let mut mine = subject.clone();

        merge_sort(&mut mine);
        subject.sort();

        assert_eq!(&mut mine, &mut subject);
    }
}
