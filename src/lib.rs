//! # Parallel Merge Sort
//!
//! `parallel_merge_sort` is an implementation of Merge Sort for a mutable
//! slice that sorts blocks of equal size in parallel threads.

extern crate num_cpus;
extern crate rand;
extern crate scoped_threadpool;

use scoped_threadpool::Pool;
//use std::slice;
use std::vec::Vec;

/// # Merge Sort
/// The mergesort function contains the actual implementation of the parallel
/// merge sort.
///
/// This merge sort generates a thread pool using the `num_cpus` crate.
///
/// The threads are scope locked so that each thread must complete before the
/// block size is doubled again.
///
/// This particular function demands a mutable slice, which is used as both
/// an input and output parameter. If you would like the function to generate
/// a new (sorted) vector, please use the function `gen_and_sort<T>(&[T])
/// -> Vec<T>`.
pub fn merge_sort<T>(arr: &mut [T])
where
    T: Ord + Send + Clone,
{
    let mut block_size = 2;

    let largest_block_size = 2 * arr.len();
    let mut pool = Pool::new(num_cpus::get() as u32);

    while block_size < largest_block_size {
        // the scope of the pooled threads is locked within this lambda, so
        // the program blocks until their completion at its end.
        pool.scoped(|scope| {
            // as many as num_blocks threads are generated by generating them
            // within this loop
            for mut block in arr.chunks_mut(block_size) {
                if block.len() <= block_size / 2 {
                    return;
                } else {
                    // and merge the halves of the slice (in parallel!)
                    scope.execute(move || {
                        merge_halves(block, block_size);
                    });
                }
            }
        });

        block_size *= 2;
    }
}

/// # Generate and Sort
/// This function generates a new (now sorted) vector when given an immutable
/// slice reference.
///
/// Because this function is merely light function overhead for the prior
/// `merge_sort<T>(arr: &mut Vec<T>)`, the use of that function should be
/// encouraged over this.
pub fn gen_and_sort<T>(arr: &[T]) -> Vec<T>
where
    T: Ord + Send + Clone,
{
    let mut ret = Vec::from(arr);
    merge_sort(&mut ret);
    ret
}

fn merge_halves<T>(half_sorted: &mut [T], block_size: usize)
where
    T: Ord + Clone,
{
    // I know having index values checked against the length is not exactly
    // idiomatic rust, but with the non-mutable iterator, you can't get the
    // currently accessed value from the iterator itself without capturing the
    // return of `next`, so it takes two more variables and a lot of unwrap and
    // is_none to work, which makes (IMO) the code significantly less readable.
    //
    // I get that having a mutable iterator would solve some of those problems,
    // but I have no intention of mutating anything, so that seems like bad
    // practice
    //
    // This works sufficiently.
    let first = Vec::from(&half_sorted[..(block_size / 2)]);
    let last = Vec::from(&half_sorted[(block_size / 2)..]);

    let mut first_cur = 0;
    let mut last_cur = 0;

    // I get that i'm repeating some code here, but
    //      a. it's two lines
    //      b. i'm hard pressed to think of a better way
    //
    // I can't consolidate them into one if because I don't know until the last
    // else that both first[first_cur] and last[last_cur] have valid values
    for elem in half_sorted.iter_mut() {
        if first_cur == first.len() {
            *elem = last[last_cur].clone();
            last_cur += 1;
        } else if last_cur == last.len() || first[first_cur] <= last[last_cur] {
            *elem = first[first_cur].clone();
            first_cur += 1;
        } else {
            *elem = last[last_cur].clone();
            last_cur += 1;
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use rand;
    use rand::prelude::*;
    use std::fmt::Debug;
    use std::vec::Vec;

    #[test]
    fn in_order() {
        vec_test(vec![1, 2]);
        vec_test(vec![1, 2, 3, 4, 5]);
        vec_test(vec![1, 2, 3, 4, 5, 6, 7, 8]);
        vec_test(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);
        vec_test(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);
    }

    #[test]
    fn reverse_order() {
        vec_test(vec![2, 1]);
        vec_test(vec![5, 4, 3, 2, 1]);
        vec_test(vec![8, 7, 6, 5, 4, 3, 2, 1]);
        vec_test(vec![12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]);
        vec_test(vec![15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]);
    }

    #[test]
    fn fuzz() {
        fuzzer::<char>();
        fuzzer::<i64>();
        fuzzer::<u64>();
    }

    #[test]
    fn edge() {
        vec_test(vec![1]);
        vec_test(Vec::<u32>::new());
    }

    fn fuzzer<T>()
    where
        T: Ord + Send + Clone + Debug,
        rand::distributions::Standard: rand::distributions::Distribution<T>,
    {
        let mut vector = Vec::<T>::with_capacity(100);
        for _ in 0..100 {
            vector.push(random());
        }

        vec_test(vector);
    }

    fn vec_test<T>(mut subject: Vec<T>)
    where
        T: Ord + Send + Clone + Debug,
    {
        let mut mine = subject.clone();

        merge_sort(&mut mine);
        subject.sort();

        assert_eq!(&mut mine, &mut subject);
    }
}
